// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

enum Role {
  admin
  dev
  qa
}

enum Permission {
  read
  write
  add_user
}

model User {
  id String @id
  email String
  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @default(now()) @updatedAt @map("updated_at")
  firstName String
  lastName String
  authenticators Authenticators[]
  orgMembers OrgMember[]
}

model OrgMember {
  id String @id
  orgId String 
  organization Organization  @relation(fields: [orgId], references: [id], onDelete: Cascade)
  userId String
  user User @relation(fields: [userId], references: [id])
  role Role
  permission Permission[]
  @@unique([userId,orgId])
  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @default(now()) @updatedAt @map("updated_at")
}

model Organization {
  id String @id
  name  String
  secret Secret?
  members OrgMember[]
  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @default(now()) @updatedAt @map("updated_at")
}

model Authenticators {
  id       Int  @id @default(autoincrement())
  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  credentialID Bytes
  credentialPublicKey Bytes
  counter BigInt
  credentialDeviceType String
  credentialBackedUp Boolean
  transports String[]
}

model Secret {
 id     Int  @id @default(autoincrement())
 orgId String  @unique 
 secret String @unique
 org   Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
 envs EnvironmentVariables[]
 created_at DateTime @default(now()) @map("created_at")
 updated_at DateTime @default(now()) @updatedAt @map("updated_at")
}

model EnvironmentVariables {
  id Int  @id @default(autoincrement())
  name String @unique
  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @default(now()) @updatedAt @map("updated_at")
  variables String
  secretId Int 
  secret   Secret @relation(fields: [secretId], references: [id], onDelete: Cascade)
}

